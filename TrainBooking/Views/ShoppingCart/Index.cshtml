@model TrainBooking.ViewModels.ShoppingCartVM

@{
    ViewData["Title"] = "Index";
}

<h1>Shopping Cart</h1>

@if (Model != null && Model.Cart.Any())
{

    <form asp-action="Payment">
        <table>
            <tr>
                <th>Date</th>
                <th>From</th>
                <th>To</th>
                <th>Departure time</th>
                <th>Arrival time</th>
                <th>@Html.DisplayNameFor(model => model.Cart[0].Class)</th>
                <th>@Html.DisplayNameFor(model => model.Cart[0].Price)</th>
                <th>Amount</th>
                <th>Subtotal</th>                
            </tr>
            @{
                float total = 0;
            }
            @for (var i = 0; i < Model.Cart.Count; i++)
            {
                <tr class="datarow">
                    @Html.HiddenFor(m => Model.Cart[i].Id)
                    @Html.HiddenFor(m => Model.Cart[i].SeatNumber)
                    @for (var j = 0; j < Model.Cart[i].Sections.Count; j++){
                        @Html.HiddenFor(m => Model.Cart[i].Sections[j].DepartureStation)
                        @Html.HiddenFor(m => Model.Cart[i].Sections[j].DepartureStationId)
                        @Html.HiddenFor(m => Model.Cart[i].Sections[j].DestinationStation)
                        @Html.HiddenFor(m => Model.Cart[i].Sections[j].DestinationStationId)
                        @Html.HiddenFor(m => Model.Cart[i].Sections[j].DepartureTime)
                        @Html.HiddenFor(m => Model.Cart[i].Sections[j].ArrivalTime)
                        @Html.HiddenFor(m => Model.Cart[i].Sections[j].Train)
                        @Html.HiddenFor(m => Model.Cart[i].Sections[j].Id)
                    }
                    <td><input asp-for="@Model.Cart[i].DepartureDate" class="form-control" readonly /></td>
                    <td><input asp-for="@Model.Cart[i].Sections.FirstOrDefault().DepartureStation" class="form-control" readonly /></td>
                    <td><input asp-for="@Model.Cart[i].Sections.LastOrDefault().DestinationStation" class="form-control" readonly /></td>
                    <td><input asp-for="@Model.Cart[i].Sections.FirstOrDefault().DepartureTime" class="form-control" readonly /></td>
                    <td><input asp-for="@Model.Cart[i].Sections.LastOrDefault().ArrivalTime" class="form-control" readonly /></td>
                    <td><input asp-for="@Model.Cart[i].Class" readonly="readonly" class="form-control" data-aantal=@i/>
                    </td>
                    <td><input asp-for="@Model.Cart[i].Price" readonly="readonly" class="form-control price" /></td>
                    <td><input asp-for="@Model.Cart[i].Amount" type="number" min="1" max="100" class="form-control amount" /></td>
                    <td>
                        @{
                            var subtotal = Model.Cart[i].Price
                                    * Model.Cart[i].Amount;
                            total += subtotal;

                        }
                        <input type="number" class="subtotal form-control" value="@subtotal" readonly />
                    </td>
                    <td>
                        <a asp-action="Delete" asp-route-id="@Model.Cart[i].Id">
                            Delete
                        </a>
                    </td>
                </tr>
            }
            <tr>

                <td>
                    Total <input id="cart-total" value="@total"
                                  type="number" readonly="readonly" class="form-control" />
                </td>
            </tr>
            <tr>
                <td>
                    <input type="submit" class="form-control" value="Checkout"/>
                </td>
            </tr>
        </table>
    </form>
}
else
{
    @Html.Raw("Your shoppingcart is empty at the moment")
}
@section Scripts {
    <script>
        function calculateSubtotals() {
            const rows = document.querySelectorAll(".datarow");

            rows.forEach(function (row) {
                const quantityInput = row.querySelector(".amount");
                const priceInput = row.querySelector(".price");
                const subtotalElement = row.querySelector(".subtotal");

                const quantity = parseInt(quantityInput.value);
                const price = parseInt(priceInput.value);
                const subtotal = isNaN(quantity) || isNaN(price) ? 0 : quantity * price;

                subtotalElement.value = subtotal;
            });
        }

        function calculateTotalAmount() {
            const subtotals = document.querySelectorAll(".subtotal");
            let total = 0;

            subtotals.forEach(function (subtotalElement) {
                const subtotal = parseInt(subtotalElement.value);
                total += isNaN(subtotal) ? 0 : subtotal;
            });
            const totalAmountElement = document.getElementById("cart-total");
            totalAmountElement.value = total;
        }
        const quantityInputs = document.querySelectorAll(".amount");
        quantityInputs.forEach(function (input) {
            input.addEventListener("input", function () {
                calculateSubtotals();
                calculateTotalAmount();
            });
        });
    </script>

}